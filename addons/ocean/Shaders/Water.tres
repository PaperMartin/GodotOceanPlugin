[gd_resource type="VisualShader" load_steps=40 format=2]

[ext_resource path="res://addons/shaderV/rgba/noise/perlin2d.gd" type="Script" id=1]
[ext_resource path="res://addons/shaderV/tools/remap.gd" type="Script" id=2]
[ext_resource path="res://addons/shaderV/rgba/blendAwithB.gd" type="Script" id=3]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=2]

[sub_resource type="VisualShaderNodeCustom" id=3]
output_port_for_preview = 0
default_input_values = [ 1, 1.0, 3, 1.0, 4, 1.0 ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "WaterLow"

[sub_resource type="VisualShaderNodeColorUniform" id=5]
uniform_name = "WaterHigh"

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=8]

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 1.0

[sub_resource type="VisualShaderNodeCustom" id=10]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, Vector3( 0, 0, 0 ) ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "AlbedoNoiseScale"

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[sub_resource type="VisualShaderNodeVectorCompose" id=14]

[sub_resource type="VisualShaderNodeTransformVecMult" id=15]

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "camera"

[sub_resource type="VisualShaderNodeCustom" id=17]
output_port_for_preview = 0
default_input_values = [ 1, 0.0, 2, 1.0, 3, -1.0, 4, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorCompose" id=18]

[sub_resource type="VisualShaderNodeTransformVecMult" id=19]

[sub_resource type="VisualShaderNodeVectorDecompose" id=20]

[sub_resource type="VisualShaderNodeVectorOp" id=21]

[sub_resource type="VisualShaderNodeVectorCompose" id=22]

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=24]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=25]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=26]
constant = -0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=27]
constant = 0.5

[sub_resource type="VisualShaderNodeCustom" id=28]
default_input_values = [ 1, 0.0, 2, 1.0, 3, -1.0, 4, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarUniform" id=29]
uniform_name = "VertexNoiseScale"

[sub_resource type="VisualShaderNodeCustom" id=30]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, Vector3( 0, 0, 0 ) ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorCompose" id=31]

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorDecompose" id=33]

[sub_resource type="VisualShaderNodeVectorCompose" id=34]

[sub_resource type="VisualShaderNodeInput" id=35]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=36]
input_name = "world"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, world_vertex_coords;

uniform float VertexNoiseScale;
uniform vec4 WaterLow : hint_color;
uniform vec4 WaterHigh : hint_color;
uniform float AlbedoNoiseScale;


// PerlinNoise2D

float perlin2dN0iseFunc(vec2 P, vec2 _per10d_perl2) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	if (_per10d_perl2.x != 0.0 && _per10d_perl2.y != 0.0)
		Pi = mod(Pi, vec4(_per10d_perl2, _per10d_perl2));
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}

// Remap

vec3 remapFunc(vec3 _inpt_r4p, vec2 _fr0m_r4p, vec2 _t0_r4p){
	return _t0_r4p.x + ((_inpt_r4p - _fr0m_r4p.x) * (_t0_r4p.y - _t0_r4p.x)) / (_fr0m_r4p.y - _fr0m_r4p.x);
}

// BlendAwithB

vec4 blendAwithBFunc(vec4 _c0l0r_blendA_rgba, vec4 _c0l0r_blendB_rgba, float _fade_blend_c0l0r){
	return mix(_c0l0r_blendA_rgba, _c0l0r_blendB_rgba, _c0l0r_blendB_rgba.a * _fade_blend_c0l0r);
}


void vertex() {
// Input:5
	vec3 n_out5p0 = VERTEX;

// VectorDecompose:6
	float n_out6p0 = n_out5p0.x;
	float n_out6p1 = n_out5p0.y;
	float n_out6p2 = n_out5p0.z;

// Input:9
	mat4 n_out9p0 = WORLD_MATRIX;

// Input:8
	vec3 n_out8p0 = VERTEX;

// TransformVectorMult:10
	vec3 n_out10p0 = (n_out9p0 * vec4(n_out8p0, 1.0)).xyz;

// VectorDecompose:11
	float n_out11p0 = n_out10p0.x;
	float n_out11p1 = n_out10p0.y;
	float n_out11p2 = n_out10p0.z;

// VectorCompose:7
	float n_in7p2 = 0.00000;
	vec3 n_out7p0 = vec3(n_out11p0, n_out11p2, n_in7p2);

// Input:14
	float n_out14p0 = TIME;

// VectorCompose:13
	float n_in13p2 = 0.00000;
	vec3 n_out13p0 = vec3(n_out14p0, n_out14p0, n_in13p2);

// VectorOp:12
	vec3 n_out12p0 = n_out7p0 + n_out13p0;

// ScalarUniform:20
	float n_out20p0 = VertexNoiseScale;

// PerlinNoise2D:3
	vec3 n_in3p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in3p3 = vec3(0.00000, 0.00000, 0.00000);
	float n_out3p0;
	{
		n_out3p0 = perlin2dN0iseFunc((n_out12p0.xy+n_in3p1.xy)*n_out20p0, n_in3p3.xy);
	}

// Scalar:15
	float n_out15p0 = -1.000000;

// Scalar:16
	float n_out16p0 = 1.000000;

// Scalar:17
	float n_out17p0 = -0.500000;

// Scalar:18
	float n_out18p0 = 0.500000;

// Remap:2
	vec3 n_out2p0;
	{
		n_out2p0 = remapFunc(vec3(n_out3p0), vec2(n_out15p0, n_out16p0), vec2(n_out17p0, n_out18p0));
	}

// VectorCompose:4
	vec3 n_out4p0 = vec3(n_out6p0, dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)), n_out6p2);

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// ColorUniform:13
	vec3 n_out13p0 = WaterLow.rgb;
	float n_out13p1 = WaterLow.a;

// ColorUniform:14
	vec3 n_out14p0 = WaterHigh.rgb;
	float n_out14p1 = WaterHigh.a;

// Input:7
	mat4 n_out7p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:6
	vec3 n_out6p0 = (n_out7p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:4
	float n_out4p0 = n_out6p0.x;
	float n_out4p1 = n_out6p0.y;
	float n_out4p2 = n_out6p0.z;

// VectorCompose:5
	float n_in5p2 = 0.00000;
	vec3 n_out5p0 = vec3(n_out4p0, n_out4p2, n_in5p2);

// Input:10
	float n_out10p0 = TIME;

// VectorCompose:9
	float n_in9p2 = 0.00000;
	vec3 n_out9p0 = vec3(n_out10p0, n_out10p0, n_in9p2);

// VectorOp:11
	vec3 n_out11p0 = n_out5p0 + n_out9p0;

// ScalarUniform:20
	float n_out20p0 = AlbedoNoiseScale;

// PerlinNoise2D:2
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in2p3 = vec3(0.00000, 0.00000, 0.00000);
	float n_out2p0;
	{
		n_out2p0 = perlin2dN0iseFunc((n_out11p0.xy+n_in2p1.xy)*n_out20p0, n_in2p3.xy);
	}

// Scalar:15
	float n_out15p0 = -1.000000;

// Scalar:16
	float n_out16p0 = 1.000000;

// Scalar:17
	float n_out17p0 = 0.000000;

// Scalar:18
	float n_out18p0 = 1.000000;

// Remap:8
	vec3 n_out8p0;
	{
		n_out8p0 = remapFunc(vec3(n_out2p0), vec2(n_out15p0, n_out16p0), vec2(n_out17p0, n_out18p0));
	}

// BlendAwithB:12
	float n_in12p1 = 1.00000;
	float n_in12p3 = 1.00000;
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_out12p0n_out12p1 = blendAwithBFunc(vec4(n_out13p0, n_in12p1), vec4(n_out14p0, n_in12p3), dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)));
		n_out12p0 = n_out12p0n_out12p1.rgb;
		n_out12p1 = n_out12p0n_out12p1.a;
	}

// Output:0
	ALBEDO = n_out12p0;

}

void light() {
// Output:0

}
"
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 660, 120 )
nodes/vertex/2/node = SubResource( 28 )
nodes/vertex/2/position = Vector2( 200, 240 )
nodes/vertex/3/node = SubResource( 30 )
nodes/vertex/3/position = Vector2( -180, 240 )
nodes/vertex/4/node = SubResource( 31 )
nodes/vertex/4/position = Vector2( 420, 140 )
nodes/vertex/5/node = SubResource( 32 )
nodes/vertex/5/position = Vector2( -80, 60 )
nodes/vertex/6/node = SubResource( 33 )
nodes/vertex/6/position = Vector2( 100, 80 )
nodes/vertex/7/node = SubResource( 34 )
nodes/vertex/7/position = Vector2( -680, 220 )
nodes/vertex/8/node = SubResource( 35 )
nodes/vertex/8/position = Vector2( -1380, 240 )
nodes/vertex/9/node = SubResource( 36 )
nodes/vertex/9/position = Vector2( -1380, 160 )
nodes/vertex/10/node = SubResource( 19 )
nodes/vertex/10/position = Vector2( -1180, 180 )
nodes/vertex/11/node = SubResource( 20 )
nodes/vertex/11/position = Vector2( -920, 200 )
nodes/vertex/12/node = SubResource( 21 )
nodes/vertex/12/position = Vector2( -440, 240 )
nodes/vertex/13/node = SubResource( 22 )
nodes/vertex/13/position = Vector2( -680, 360 )
nodes/vertex/14/node = SubResource( 23 )
nodes/vertex/14/position = Vector2( -900, 340 )
nodes/vertex/15/node = SubResource( 24 )
nodes/vertex/15/position = Vector2( 0, 280 )
nodes/vertex/16/node = SubResource( 25 )
nodes/vertex/16/position = Vector2( 0, 340 )
nodes/vertex/17/node = SubResource( 26 )
nodes/vertex/17/position = Vector2( 0, 400 )
nodes/vertex/18/node = SubResource( 27 )
nodes/vertex/18/position = Vector2( 0, 460 )
nodes/vertex/20/node = SubResource( 29 )
nodes/vertex/20/position = Vector2( -440, 380 )
nodes/vertex/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 0, 0, 5, 0, 6, 0, 6, 0, 4, 0, 6, 2, 4, 2, 8, 0, 10, 1, 9, 0, 10, 0, 10, 0, 11, 0, 11, 0, 7, 0, 11, 2, 7, 1, 7, 0, 12, 0, 13, 0, 12, 1, 14, 0, 13, 0, 14, 0, 13, 1, 12, 0, 3, 0, 2, 0, 4, 1, 15, 0, 2, 1, 16, 0, 2, 2, 17, 0, 2, 3, 18, 0, 2, 4, 20, 0, 3, 2 )
nodes/fragment/0/position = Vector2( 1220, 320 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 80, 400 )
nodes/fragment/3/node = SubResource( 12 )
nodes/fragment/3/position = Vector2( -1160, 400 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -640, 420 )
nodes/fragment/5/node = SubResource( 14 )
nodes/fragment/5/position = Vector2( -400, 400 )
nodes/fragment/6/node = SubResource( 15 )
nodes/fragment/6/position = Vector2( -880, 360 )
nodes/fragment/7/node = SubResource( 16 )
nodes/fragment/7/position = Vector2( -1160, 300 )
nodes/fragment/8/node = SubResource( 17 )
nodes/fragment/8/position = Vector2( 500, 360 )
nodes/fragment/9/node = SubResource( 18 )
nodes/fragment/9/position = Vector2( -400, 520 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -620, 520 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -160, 440 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 900, 200 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 400, 80 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 400, 220 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 280, 440 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 280, 500 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 280, 560 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 280, 620 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( -160, 560 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 3, 0, 6, 1, 7, 0, 6, 0, 4, 2, 5, 1, 2, 0, 8, 0, 6, 0, 4, 0, 10, 0, 9, 0, 10, 0, 9, 1, 5, 0, 11, 0, 9, 0, 11, 1, 11, 0, 2, 0, 13, 0, 12, 0, 14, 0, 12, 2, 12, 0, 0, 0, 8, 0, 12, 4, 15, 0, 8, 1, 16, 0, 8, 2, 17, 0, 8, 3, 18, 0, 8, 4, 20, 0, 2, 2 )
